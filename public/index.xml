<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go Kure</title>
    <link>http://localhost:1313/index.html</link>
    <description>Kure: Type-Safe Kubernetes Resource Generation Warning ⚠️ Work in Progress: Kure is currently under active development and has not been released yet. APIs and features are subject to change. Use at your own risk. Kure is a powerful Go library for programmatically building Kubernetes resources, designed specifically for GitOps workflows. Say goodbye to complex templating engines and hello to strongly-typed, composable resource generation.</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Overview</title>
      <link>http://localhost:1313/overview/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/overview/index.html</guid>
      <description>Project Overview Welcome to Kure - a Go library for programmatically building Kubernetes resources for GitOps workflows.&#xA;Warning ⚠️ Work in Progress: Kure is currently under active development and has not been released yet. APIs and features are subject to change. Use at your own risk. What is Kure? Kure provides a type-safe, programmatic approach to generating Kubernetes manifests. Instead of wrestling with YAML templates or complex templating engines, you write Go code that produces clean, consistent Kubernetes resources.</description>
    </item>
    <item>
      <title>Getting Started</title>
      <link>http://localhost:1313/getting-started/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/getting-started/index.html</guid>
      <description>Getting Started with Kure This guide will help you get up and running with Kure quickly.&#xA;Installation go get github.com/go-kure/kure Quick Example Here’s a simple example creating a Kubernetes Deployment:&#xA;package main import ( &#34;github.com/go-kure/kure/pkg/kubernetes&#34; &#34;github.com/go-kure/kure/pkg/io&#34; ) func main() { // Create a deployment deployment := kubernetes.CreateDeployment(&#34;my-app&#34;, &#34;default&#34;) kubernetes.AddDeploymentContainer(deployment, &#34;app&#34;, &#34;nginx:latest&#34;) kubernetes.SetDeploymentReplicas(deployment, 3) // Output as YAML printer := io.NewPrinter() printer.PrintObj(deployment) } Next Steps Explore the Packages: Learn about the available packages Read the Architecture: Understand how Kure works Try Examples: See real-world examples Join the Community: Contribute to the GitHub repository Resources API Documentation GitHub Repository Issue Tracker</description>
    </item>
    <item>
      <title>Architecture</title>
      <link>http://localhost:1313/architecture/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/architecture/index.html</guid>
      <description>Architecture This section covers the architectural design and implementation details of Kure.&#xA;Design Philosophy Kure is built on several core principles:&#xA;Type Safety First: Use Go’s type system to catch errors early Composability: Build complex configurations from simple, reusable parts No Magic: Explicit is better than implicit GitOps Native: Output designed for version control and automation Core Concepts Hierarchical Domain Model: Cluster → Node → Bundle → Application Builder Pattern: Fluent APIs for resource construction Strategy Pattern: Pluggable resource generation strategies Clean Separation: Domain logic separate from serialization Learn More Read the full architecture documentation for an in-depth exploration of Kure’s design, including:</description>
    </item>
    <item>
      <title>Packages</title>
      <link>http://localhost:1313/packages/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/packages/index.html</guid>
      <description>Kure Packages Explore the core packages that make up the Kure library. Each package provides specific functionality for building and managing Kubernetes resources.&#xA;Core Packages Launcher The launcher package (formerly kurel) provides a package system for creating reusable, customizable Kubernetes applications without the complexity of templating engines. It uses a declarative patch-based approach to customize base Kubernetes manifests.&#xA;Patch The patch package implements a JSONPath-based declarative patching system. It allows you to modify Kubernetes resources using a simple, powerful patch language that maintains YAML structure and comments.</description>
    </item>
    <item>
      <title>Examples</title>
      <link>http://localhost:1313/examples/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/examples/index.html</guid>
      <description>Examples Learn how to use Kure through practical examples and use cases.&#xA;Available Examples Patch Examples Comprehensive examples demonstrating the patch system capabilities, including:&#xA;Basic patching operations Complex transformations Working with arrays and objects Preserving YAML structure and comments More Examples Coming Soon We’re actively developing more examples to help you get started with Kure:&#xA;Complete cluster configurations Multi-environment setups Integration with Flux and ArgoCD Real-world use cases Check back soon or contribute your own examples!</description>
    </item>
    <item>
      <title>Resources</title>
      <link>http://localhost:1313/resources/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/resources/index.html</guid>
      <description>Resources &amp; Reference Additional resources to help you work with Kure.&#xA;API Reference Go Package Documentation - Complete API reference Source Code - Browse the source on GitHub Community GitHub Discussions - Ask questions and share ideas Issue Tracker - Report bugs or request features Contributing Guide - Learn how to contribute Related Projects Flux - GitOps toolkit for Kubernetes ArgoCD - Declarative GitOps CD for Kubernetes cert-manager - X.509 certificate management for Kubernetes External Secrets Operator - Integrate external secret management systems Learning Resources Kubernetes Documentation - Official Kubernetes docs Go Documentation - Official Go documentation GitOps Principles - Learn about GitOps Tools &amp; Integration kubectl - Kubernetes command-line tool kustomize - Kubernetes native configuration management Helm - The package manager for Kubernetes</description>
    </item>
  </channel>
</rss>